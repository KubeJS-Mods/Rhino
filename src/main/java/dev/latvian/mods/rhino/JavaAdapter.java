/* -*- Mode: java; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package dev.latvian.mods.rhino;

import dev.latvian.mods.rhino.classfile.ByteCode;
import dev.latvian.mods.rhino.classfile.ClassFileWriter;
import dev.latvian.mods.rhino.type.TypeInfo;
import org.apache.commons.lang3.NotImplementedException;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;

public final class JavaAdapter implements IdFunctionCall {
	private static final Object FTAG = "JavaAdapter";
	private static final int Id_JavaAdapter = 1;

	/**
	 * Provides a key with which to distinguish previously generated
	 * adapter classes stored in a hash table.
	 */
	static class JavaAdapterSignature {
		Class<?> superClass;
		Class<?>[] interfaces;
		ObjToIntMap names;

		JavaAdapterSignature(Class<?> superClass, Class<?>[] interfaces, ObjToIntMap names) {
			this.superClass = superClass;
			this.interfaces = interfaces;
			this.names = names;
		}

		@Override
		public boolean equals(Object obj) {
			if (!(obj instanceof JavaAdapterSignature sig)) {
				return false;
			}
			if (superClass != sig.superClass) {
				return false;
			}
			if (interfaces != sig.interfaces) {
				if (interfaces.length != sig.interfaces.length) {
					return false;
				}
				for (int i = 0; i < interfaces.length; i++) {
					if (interfaces[i] != sig.interfaces[i]) {
						return false;
					}
				}
			}
			if (names.size() != sig.names.size()) {
				return false;
			}
			ObjToIntMap.Iterator iter = new ObjToIntMap.Iterator(names);
			for (iter.start(); !iter.done(); iter.next()) {
				String name = (String) iter.getKey();
				int arity = iter.getValue();
				if (arity != sig.names.get(name, arity + 1)) {
					return false;
				}
			}
			return true;
		}

		@Override
		public int hashCode() {
			return (superClass.hashCode() + Arrays.hashCode(interfaces)) ^ names.size();
		}
	}

	public static void init(Context cx, Scriptable scope, boolean sealed) {
		JavaAdapter obj = new JavaAdapter();
		IdFunctionObject ctor = new IdFunctionObject(obj, FTAG, Id_JavaAdapter, "JavaAdapter", 1, scope);
		ctor.markAsConstructor(null);
		if (sealed) {
			ctor.sealObject(cx);
		}
		ctor.exportAsScopeProperty(cx);
	}

	// Used by generated bytecode
	@SuppressWarnings("unused")
	public static Object convertResult(Context cx, Object result, Class<?> c) {
		var typeInfo = TypeInfo.of(c);

		if (result == Undefined.INSTANCE && (typeInfo != TypeInfo.OBJECT && typeInfo != TypeInfo.STRING)) {
			// Avoid an error for an undefined value; return null instead.
			return null;
		}

		return c == null ? result : cx.jsToJava(result, typeInfo);
	}

	// Used by generated bytecode
	@SuppressWarnings("unused")
	public static Scriptable createAdapterWrapper(Scriptable obj, Object adapter, Context cx) {
		Scriptable scope = ScriptableObject.getTopLevelScope(obj);
		NativeJavaObject res = new NativeJavaObject(scope, adapter, TypeInfo.NONE, true, cx);
		res.setPrototype(obj);
		return res;
	}

	public static Object getAdapterSelf(Class<?> adapterClass, Object adapter) throws NoSuchFieldException, IllegalAccessException {
		Field self = adapterClass.getDeclaredField("self");
		return self.get(adapter);
	}

	static Object js_createAdapter(Context cx, Scriptable scope, Object[] args) {
		int N = args.length;
		if (N == 0) {
			throw ScriptRuntime.typeError0(cx, "msg.adapter.zero.args");
		}

		// Expected arguments:
		// Any number of NativeJavaClass objects representing the super-class
		// and/or interfaces to implement, followed by one NativeObject providing
		// the implementation, followed by any number of arguments to pass on
		// to the (super-class) constructor.

		int classCount;
		for (classCount = 0; classCount < N - 1; classCount++) {
			Object arg = args[classCount];
			// We explicitly test for NativeObject here since checking for
			// instanceof ScriptableObject or !(instanceof NativeJavaClass)
			// would fail for a Java class that isn't found in the class path
			// as NativeJavaPackage extends ScriptableObject.
			if (arg instanceof NativeObject) {
				break;
			}
			if (!(arg instanceof NativeJavaClass)) {
				throw ScriptRuntime.typeError2(cx, "msg.not.java.class.arg", String.valueOf(classCount), ScriptRuntime.toString(cx, arg));
			}
		}
		Class<?> superClass = null;
		Class<?>[] intfs = new Class[classCount];
		int interfaceCount = 0;
		for (int i = 0; i < classCount; ++i) {
			Class<?> c = ((NativeJavaClass) args[i]).getClassObject();
			if (!c.isInterface()) {
				if (superClass != null) {
					throw ScriptRuntime.typeError2(cx, "msg.only.one.super", superClass.getName(), c.getName());
				}
				superClass = c;
			} else {
				intfs[interfaceCount++] = c;
			}
		}

		if (superClass == null) {
			superClass = ScriptRuntime.ObjectClass;
		}

		Class<?>[] interfaces = new Class[interfaceCount];
		System.arraycopy(intfs, 0, interfaces, 0, interfaceCount);
		// next argument is implementation, must be scriptable
		Scriptable obj = ScriptableObject.ensureScriptable(args[classCount], cx);

		Class<?> adapterClass = getAdapterClass(cx, superClass, interfaces, obj);
		Object adapter;

		int argsCount = N - classCount - 1;
		try {
			if (argsCount > 0) {
				// Arguments contain parameters for super-class constructor.
				// We use the generic Java method lookup logic to find and
				// invoke the right constructor.
				Object[] ctorArgs = new Object[argsCount + 2];
				ctorArgs[0] = obj;
				ctorArgs[1] = cx;
				System.arraycopy(args, classCount + 1, ctorArgs, 2, argsCount);
				// TODO: cache class wrapper?
				NativeJavaClass classWrapper = new NativeJavaClass(cx, scope, adapterClass, true);
				NativeJavaMethod ctors = classWrapper.members.ctors;
				int index = ctors.findCachedFunction(cx, ctorArgs);
				if (index < 0) {
					String sig = NativeJavaMethod.scriptSignature(args);
					throw Context.reportRuntimeError2("msg.no.java.ctor", adapterClass.getName(), sig, cx);
				}

				// Found the constructor, so try invoking it.
				adapter = NativeJavaClass.constructInternal(cx, scope, ctorArgs, ctors.methods[index]);
			} else {
				Class<?>[] ctorParms = {ScriptRuntime.ScriptableClass, Context.class};
				Object[] ctorArgs = {obj, cx};
				adapter = adapterClass.getConstructor(ctorParms).newInstance(ctorArgs);
			}

			Object self = getAdapterSelf(adapterClass, adapter);
			// Return unwrapped JavaAdapter if it implements Scriptable
			if (self instanceof Wrapper) {
				Object unwrapped = ((Wrapper) self).unwrap();
				if (unwrapped instanceof Scriptable) {
					if (unwrapped instanceof ScriptableObject) {
						ScriptRuntime.setObjectProtoAndParent(cx, scope, (ScriptableObject) unwrapped);
					}
					return unwrapped;
				}
			}
			return self;
		} catch (Exception ex) {
			throw Context.throwAsScriptRuntimeEx(ex, cx);
		}
	}

	private static ObjToIntMap getObjectFunctionNames(Context cx, Scriptable obj) {
		Object[] ids = ScriptableObject.getPropertyIds(cx, obj);
		ObjToIntMap map = new ObjToIntMap(ids.length);
		for (int i = 0; i != ids.length; ++i) {
			if (!(ids[i] instanceof String id)) {
				continue;
			}
			Object value = ScriptableObject.getProperty(obj, id, cx);
			if (value instanceof Function f) {
				int length = ScriptRuntime.toInt32(cx, ScriptableObject.getProperty(f, "length", cx));
				if (length < 0) {
					length = 0;
				}
				map.put(id, length);
			}
		}
		return map;
	}

	private static Class<?> getAdapterClass(Context cx, Class<?> superClass, Class<?>[] interfaces, Scriptable obj) {
		Map<JavaAdapterSignature, Class<?>> generated = cx.getInterfaceAdapterCacheMap();

		ObjToIntMap names = getObjectFunctionNames(cx, obj);
		JavaAdapterSignature sig;
		sig = new JavaAdapterSignature(superClass, interfaces, names);
		Class<?> adapterClass = generated.get(sig);
		if (adapterClass == null) {
			String adapterName = "adapter" + cx.newClassSerialNumber();
			byte[] code = createAdapterCode(names, adapterName, superClass, interfaces, null, cx);

			adapterClass = loadAdapterClass(cx, adapterName, code);
			generated.put(sig, adapterClass);
		}
		return adapterClass;
	}

	public static byte[] createAdapterCode(ObjToIntMap functionNames, String adapterName, Class<?> superClass, Class<?>[] interfaces, String scriptClassName, Context cx) {
		ClassFileWriter cfw = new ClassFileWriter(adapterName, superClass.getName(), "<adapter>");
		cfw.addField("context", "Ldev/latvian/mods/rhino/Context;", (short) (ClassFileWriter.ACC_PUBLIC | ClassFileWriter.ACC_FINAL));
		cfw.addField("delegee", "Ldev/latvian/mods/rhino/Scriptable;", (short) (ClassFileWriter.ACC_PUBLIC | ClassFileWriter.ACC_FINAL));
		cfw.addField("self", "Ldev/latvian/mods/rhino/Scriptable;", (short) (ClassFileWriter.ACC_PUBLIC | ClassFileWriter.ACC_FINAL));
		int interfacesCount = interfaces == null ? 0 : interfaces.length;
		for (int i = 0; i < interfacesCount; i++) {
			if (interfaces[i] != null) {
				cfw.addInterface(interfaces[i].getName());
			}
		}

		String superName = superClass.getName().replace('.', '/');
		Constructor<?>[] ctors = superClass.getDeclaredConstructors();
		for (Constructor<?> ctor : ctors) {
			int mod = ctor.getModifiers();
			if (Modifier.isPublic(mod) || Modifier.isProtected(mod)) {
				generateCtor(cfw, adapterName, superName, ctor);
			}
		}
		generateSerialCtor(cfw, adapterName, superName);
		if (scriptClassName != null) {
			generateEmptyCtor(cfw, adapterName, superName, scriptClassName);
		}

		ObjToIntMap generatedOverrides = new ObjToIntMap();
		ObjToIntMap generatedMethods = new ObjToIntMap();

		// generate methods to satisfy all specified interfaces.
		for (int i = 0; i < interfacesCount; i++) {
			Method[] methods = interfaces[i].getMethods();
			for (Method method : methods) {
				int mods = method.getModifiers();
				if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || method.isDefault()) {
					continue;
				}
				String methodName = method.getName();
				Class<?>[] argTypes = method.getParameterTypes();
				if (!functionNames.has(methodName)) {
					try {
						superClass.getMethod(methodName, argTypes);
						// The class we're extending implements this method and
						// the JavaScript object doesn't have an override. See
						// bug 61226.
						continue;
					} catch (NoSuchMethodException e) {
						// Not implemented by superclass; fall through
					}
				}
				// make sure to generate only one instance of a particular
				// method/signature.
				String methodSignature = getMethodSignature(method, argTypes);
				String methodKey = methodName + methodSignature;
				if (!generatedOverrides.has(methodKey)) {
					generateMethod(cfw, adapterName, methodName, argTypes, method.getReturnType(), true, cx);
					generatedOverrides.put(methodKey, 0);
					generatedMethods.put(methodName, 0);
				}
			}
		}

		// Now, go through the superclass's methods, checking for abstract
		// methods or additional methods to override.

		// generate any additional overrides that the object might contain.
		Method[] methods = getOverridableMethods(superClass);
		for (Method method : methods) {
			int mods = method.getModifiers();
			// if a method is marked abstract, must implement it or the
			// resulting class won't be instantiable. otherwise, if the object
			// has a property of the same name, then an override is intended.
			boolean isAbstractMethod = Modifier.isAbstract(mods);
			String methodName = method.getName();
			if (isAbstractMethod || functionNames.has(methodName)) {
				// make sure to generate only one instance of a particular
				// method/signature.
				Class<?>[] argTypes = method.getParameterTypes();
				String methodSignature = getMethodSignature(method, argTypes);
				String methodKey = methodName + methodSignature;
				if (!generatedOverrides.has(methodKey)) {
					generateMethod(cfw, adapterName, methodName, argTypes, method.getReturnType(), true, cx);
					generatedOverrides.put(methodKey, 0);
					generatedMethods.put(methodName, 0);

					// if a method was overridden, generate a "super$method"
					// which lets the delegate call the superclass' version.
					if (!isAbstractMethod) {
						generateSuper(cfw, superName, methodName, methodSignature, argTypes, method.getReturnType());
					}
				}
			}
		}

		// Generate Java methods for remaining properties that are not
		// overrides.
		ObjToIntMap.Iterator iter = new ObjToIntMap.Iterator(functionNames);
		for (iter.start(); !iter.done(); iter.next()) {
			String functionName = (String) iter.getKey();
			if (generatedMethods.has(functionName)) {
				continue;
			}
			int length = iter.getValue();
			Class<?>[] parms = new Class[length];
			Arrays.fill(parms, ScriptRuntime.ObjectClass);
			generateMethod(cfw, adapterName, functionName, parms, ScriptRuntime.ObjectClass, false, cx);
		}
		return cfw.toByteArray();
	}

	static Method[] getOverridableMethods(Class<?> clazz) {
		ArrayList<Method> list = new ArrayList<>();
		HashSet<String> skip = new HashSet<>();
		// Check superclasses before interfaces so we always choose
		// implemented methods over abstract ones, even if a subclass
		// re-implements an interface already implemented in a superclass
		// (e.g. java.util.ArrayList)
		for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {
			appendOverridableMethods(c, list, skip);
		}
		for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {
			for (Class<?> intf : c.getInterfaces()) {
				appendOverridableMethods(intf, list, skip);
			}
		}
		return list.toArray(new Method[0]);
	}

	private static void appendOverridableMethods(Class<?> c, ArrayList<Method> list, HashSet<String> skip) {
		Method[] methods = c.getDeclaredMethods();
		for (Method method : methods) {
			String methodKey = method.getName() + getMethodSignature(method, method.getParameterTypes());
			if (skip.contains(methodKey)) {
				continue; // skip this method
			}
			int mods = method.getModifiers();
			if (Modifier.isStatic(mods)) {
				continue;
			}
			if (Modifier.isFinal(mods)) {
				// Make sure we don't add a final method to the list
				// of overridable methods.
				skip.add(methodKey);
				continue;
			}
			if (Modifier.isPublic(mods) || Modifier.isProtected(mods)) {
				list.add(method);
				skip.add(methodKey);
			}
		}
	}

	static Class<?> loadAdapterClass(Context cx, String className, byte[] classBytes) {
		GeneratedClassLoader loader = cx.createClassLoader(cx.getApplicationClassLoader());
		Class<?> result = loader.defineClass(className, classBytes);
		loader.linkClass(result);
		return result;
	}

	// Used by generated bytecode in the adapter's empty ctor
	@SuppressWarnings("unused")
	public static Function getFunction(Scriptable obj, String functionName, Context cx) {
		Object x = ScriptableObject.getProperty(obj, functionName, cx);
		if (x == Scriptable.NOT_FOUND) {
			// This method used to swallow the exception from calling
			// an undefined method. People have come to depend on this
			// somewhat dubious behavior. It allows people to avoid
			// implementing listener methods that they don't care about,
			// for instance.
			return null;
		}
		if (!(x instanceof Function)) {
			throw ScriptRuntime.notFunctionError(cx, x, functionName);
		}

		return (Function) x;
	}

	// Used by generated bytecode in the adapter's empty ctor

	/**
	 * Utility method which dynamically binds a Context to the current thread,
	 * if none already exists.
	 */
	@SuppressWarnings("unused")
	public static Object callMethod(Context cx,
									final Scriptable thisObj,
									final Function f, final Object[] args,
									final long argsToWrap) {
		if (f == null) {
			// See comments in getFunction
			return null;
		}

		final Scriptable scope = f.getParentScope();
		if (argsToWrap == 0) {
			return f.call(cx, scope, thisObj, args);
			//return cx.callSync(f, scope, thisObj, args);
		}

		return doCall(cx, scope, thisObj, f, args, argsToWrap);
	}

	private static Object doCall(Context cx, Scriptable scope,
								 Scriptable thisObj, Function f,
								 Object[] args, long argsToWrap) {
		// Wrap the rest of objects
		for (int i = 0; i != args.length; ++i) {
			if (0 != (argsToWrap & (1L << i))) {
				Object arg = args[i];
				if (!(arg instanceof Scriptable)) {
					args[i] = cx.wrapAny(scope, arg);
				}
			}
		}
		return f.call(cx, scope, thisObj, args);
	}

	// Used by generated bytecode in the adapter's empty ctor
	@SuppressWarnings("unused")
	public static Scriptable runScript(final Script script, Context cx) {
		var globalScope = cx.getTopCallScope(); // ScriptRuntime.getGlobal(cx);
		script.exec(cx, globalScope);
		return globalScope;
	}

	private static void generateCtor(ClassFileWriter cfw, String adapterName, String superName, Constructor<?> superCtor) {
		// When calling methods, the JVM passes arguments on the stack in to the target method through
		// consecutive locals, starting at 0. We need to keep track of the maximum number of locals
		// used in a method.
		short locals = 3; // this + context + delegee(Scriptable)
		Class<?>[] parameters = superCtor.getParameterTypes();

		// Note that we swapped arguments in app-facing constructors to avoid
		// conflicting signatures with serial constructor defined below.
		if (parameters.length == 0) {
			// public void <init>(Scriptable, Context)
			cfw.startMethod("<init>", "(Ldev/latvian/mods/rhino/Scriptable;" + "Ldev/latvian/mods/rhino/Context;)V", ClassFileWriter.ACC_PUBLIC);

			// Invoke base class constructor
			cfw.add(ByteCode.ALOAD_0);  // this
			cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, "<init>", "()V");
		} else {
			StringBuilder sig = new StringBuilder("(Ldev/latvian/mods/rhino/Scriptable;" + "Ldev/latvian/mods/rhino/Context;");
			int marker = sig.length(); // lets us reuse buffer for super signature
			for (Class<?> c : parameters) {
				appendTypeString(sig, c);
			}
			sig.append(")V");
			// public void <init>(Scriptable, Context, ...)
			cfw.startMethod("<init>", sig.toString(), ClassFileWriter.ACC_PUBLIC);

			// Invoke base class constructor
			cfw.add(ByteCode.ALOAD_0);  // this
			short paramOffset = 3;
			for (Class<?> parameter : parameters) {
				paramOffset += generatePushParam(cfw, paramOffset, parameter);
			}
			locals = paramOffset;
			sig.delete(1, marker);
			cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, "<init>", sig.toString());
		}

		// Save parameter in instance variable "delegee"
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.add(ByteCode.ALOAD_1);  // first arg: Scriptable delegee
		cfw.add(ByteCode.PUTFIELD, adapterName, "delegee", "Ldev/latvian/mods/rhino/Scriptable;");

		// Save parameter in instance variable "context"
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.add(ByteCode.ALOAD_2);  // second arg: Context instance
		cfw.add(ByteCode.PUTFIELD, adapterName, "context", "Ldev/latvian/mods/rhino/Context;");

		cfw.add(ByteCode.ALOAD_0);  // this for the following PUTFIELD for self
		// create a wrapper object to be used as "this" in method calls
		cfw.add(ByteCode.ALOAD_1);  // the Scriptable delegee
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.add(ByteCode.ALOAD_2);  // Context instance
		// This method invoke uses 3 locals
		cfw.addInvoke(ByteCode.INVOKESTATIC,
			"dev/latvian/mods/rhino/JavaAdapter",
			"createAdapterWrapper",
			"(Ldev/latvian/mods/rhino/Scriptable;" + "Ljava/lang/Object;" + "Ldev/latvian/mods/rhino/Context;" + ")Ldev/latvian/mods/rhino/Scriptable;");
		cfw.add(ByteCode.PUTFIELD, adapterName, "self", "Ldev/latvian/mods/rhino/Scriptable;");

		cfw.add(ByteCode.RETURN);
		cfw.stopMethod(locals);
	}

	private static void generateSerialCtor(ClassFileWriter cfw, String adapterName, String superName) {
		// public void <init>(Context, Scriptable, Scriptable)
		cfw.startMethod("<init>",
			"(Ldev/latvian/mods/rhino/Context;" + "Ldev/latvian/mods/rhino/Scriptable;" + "Ldev/latvian/mods/rhino/Scriptable;" + ")V",
			ClassFileWriter.ACC_PUBLIC);

		// Invoke base class constructor
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, "<init>", "()V");

		// Save parameter in instance variable "context"
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.add(ByteCode.ALOAD_1);  // first arg: Context instance
		cfw.add(ByteCode.PUTFIELD, adapterName, "context", "Ldev/latvian/mods/rhino/Context;");

		// Save parameter in instance variable "delegee"
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.add(ByteCode.ALOAD_2);  // second arg: Scriptable delegee
		cfw.add(ByteCode.PUTFIELD, adapterName, "delegee", "Ldev/latvian/mods/rhino/Scriptable;");

		// save self
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.add(ByteCode.ALOAD_3);  // third arg: Scriptable self
		cfw.add(ByteCode.PUTFIELD, adapterName, "self", "Ldev/latvian/mods/rhino/Scriptable;");

		cfw.add(ByteCode.RETURN);
		cfw.stopMethod((short) 4); // 4: this + context + delegee + self
	}

	private static void generateEmptyCtor(ClassFileWriter cfw, String adapterName, String superName, String scriptClassName) {
		// public void <init>()
		cfw.startMethod("<init>", "()V", ClassFileWriter.ACC_PUBLIC);

		// Invoke base class constructor
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, "<init>", "()V");

		// Set factory to null to use current global when necessary
		cfw.add(ByteCode.ALOAD_0);
		cfw.add(ByteCode.ACONST_NULL);
		cfw.add(ByteCode.PUTFIELD, adapterName, "context", "Ldev/latvian/mods/rhino/Context;");

		// Load script class
		cfw.add(ByteCode.NEW, scriptClassName);
		cfw.add(ByteCode.DUP);
		cfw.addInvoke(ByteCode.INVOKESPECIAL, scriptClassName, "<init>", "()V");

		// Run script and save resulting scope
		// public static Scriptable runScript(Script)
		cfw.addInvoke(ByteCode.INVOKESTATIC,
			"dev/latvian/mods/rhino/JavaAdapter",
			"runScript",
			"(Ldev/latvian/mods/rhino/Script;" + ")Ldev/latvian/mods/rhino/Scriptable;");
		cfw.add(ByteCode.ASTORE_1);

		// Save the Scriptable in instance variable "delegee"
		cfw.add(ByteCode.ALOAD_0);  // this
		cfw.add(ByteCode.ALOAD_1);  // the Scriptable
		cfw.add(ByteCode.PUTFIELD, adapterName, "delegee", "Ldev/latvian/mods/rhino/Scriptable;");

		cfw.add(ByteCode.ALOAD_0);  // this for the following PUTFIELD for self
		// create a wrapper object to be used as "this" in method calls
		cfw.add(ByteCode.ALOAD_1);    // the Scriptable
		cfw.add(ByteCode.ALOAD_0);    // this
		cfw.add(ByteCode.ACONST_NULL);  // context
		// public static Scriptable createAdapterWrapper(Scriptable, Object, Context);
		cfw.addInvoke(ByteCode.INVOKESTATIC,
			"dev/latvian/mods/rhino/JavaAdapter",
			"createAdapterWrapper",
			"(Ldev/latvian/mods/rhino/Scriptable;" + "Ljava/lang/Object;" + "Ldev/latvian/mods/rhino/Context;" + ")Ldev/latvian/mods/rhino/Scriptable;");
		cfw.add(ByteCode.PUTFIELD, adapterName, "self", "Ldev/latvian/mods/rhino/Scriptable;");

		cfw.add(ByteCode.RETURN);
		cfw.stopMethod((short) 2); // this + delegee

		throw new NotImplementedException("createAdapterWrapper can't be called with a null context.");
	}

	/**
	 * Generates code to wrap Java arguments into Object[].
	 * Non-primitive Java types are left as-is pending conversion
	 * in the helper method. Leaves the array object on the top of the stack.
	 */
	static void generatePushWrappedArgs(ClassFileWriter cfw, Class<?>[] argTypes, int arrayLength) {
		// push arguments
		cfw.addPush(arrayLength);
		cfw.add(ByteCode.ANEWARRAY, "java/lang/Object");
		int paramOffset = 1;
		for (int i = 0; i != argTypes.length; ++i) {
			cfw.add(ByteCode.DUP); // duplicate array reference
			cfw.addPush(i);
			paramOffset += generateWrapArg(cfw, paramOffset, argTypes[i]);
			cfw.add(ByteCode.AASTORE);
		}
	}

	/**
	 * Generates code to wrap Java argument into Object.
	 * Non-primitive Java types are left unconverted pending conversion
	 * in the helper method. Leaves the wrapper object on the top of the stack.
	 */
	private static int generateWrapArg(ClassFileWriter cfw, int paramOffset, Class<?> argType) {
		int size = 1;
		if (!argType.isPrimitive()) {
			cfw.add(ByteCode.ALOAD, paramOffset);

		} else if (argType == Boolean.TYPE) {
			// wrap boolean values with java.lang.Boolean.
			cfw.add(ByteCode.NEW, "java/lang/Boolean");
			cfw.add(ByteCode.DUP);
			cfw.add(ByteCode.ILOAD, paramOffset);
			cfw.addInvoke(ByteCode.INVOKESPECIAL, "java/lang/Boolean", "<init>", "(Z)V");

		} else if (argType == Character.TYPE) {
			// Create a string of length 1 using the character parameter.
			cfw.add(ByteCode.ILOAD, paramOffset);
			cfw.addInvoke(ByteCode.INVOKESTATIC, "java/lang/String", "valueOf", "(C)Ljava/lang/String;");

		} else {
			// convert all numeric values to java.lang.Double.
			cfw.add(ByteCode.NEW, "java/lang/Double");
			cfw.add(ByteCode.DUP);
			String typeName = argType.getName();
			switch (typeName.charAt(0)) {
				case 'b', 's', 'i' -> {
					// load an int value, convert to double.
					cfw.add(ByteCode.ILOAD, paramOffset);
					cfw.add(ByteCode.I2D);
				}
				case 'l' -> {
					// load a long, convert to double.
					cfw.add(ByteCode.LLOAD, paramOffset);
					cfw.add(ByteCode.L2D);
					size = 2;
				}
				case 'f' -> {
					// load a float, convert to double.
					cfw.add(ByteCode.FLOAD, paramOffset);
					cfw.add(ByteCode.F2D);
				}
				case 'd' -> {
					cfw.add(ByteCode.DLOAD, paramOffset);
					size = 2;
				}
			}
			cfw.addInvoke(ByteCode.INVOKESPECIAL, "java/lang/Double", "<init>", "(D)V");
		}
		return size;
	}

	/**
	 * Generates code to convert a wrapped value type to a primitive type.
	 * Handles unwrapping java.lang.Boolean, and java.lang.Number types.
	 * Generates the appropriate RETURN bytecode.
	 */
	static void generateReturnResult(ClassFileWriter cfw, String genName, Class<?> retType, boolean callConvertResult) {
		// wrap boolean values with java.lang.Boolean, convert all other
		// primitive values to java.lang.Double.
		if (retType == Void.TYPE) {
			cfw.add(ByteCode.POP);
			cfw.add(ByteCode.RETURN);

		} else if (retType == Boolean.TYPE) {
			cfw.add(ByteCode.ALOAD_0); // this
			cfw.add(ByteCode.GETFIELD, genName, "context", "Ldev/latvian/mods/rhino/Context;");
			cfw.add(ByteCode.SWAP); // swap the object to convert with context
			cfw.addInvoke(ByteCode.INVOKEVIRTUAL,
				"dev/latvian/mods/rhino/Context",
				"toBoolean",
				"(Ljava/lang/Object;)Z");
			cfw.add(ByteCode.IRETURN);

		} else if (retType == Character.TYPE) {
			// characters are represented as strings in JavaScript.
			// return the first character.
			// first convert the value to a string if possible.
			cfw.add(ByteCode.ALOAD_0); // this
			cfw.add(ByteCode.GETFIELD, genName, "context", "Ldev/latvian/mods/rhino/Context;");
			cfw.add(ByteCode.SWAP); // swap the object to convert with context
			cfw.addInvoke(ByteCode.INVOKEVIRTUAL,
				"dev/latvian/mods/rhino/Context",
				"toString",
				"(Ljava/lang/Object;)Ljava/lang/String;");
			cfw.add(ByteCode.ICONST_0);
			cfw.addInvoke(ByteCode.INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C");
			cfw.add(ByteCode.IRETURN);

		} else if (retType.isPrimitive()) {
			cfw.add(ByteCode.ALOAD_0); // this
			cfw.add(ByteCode.GETFIELD, genName, "context", "Ldev/latvian/mods/rhino/Context;");
			cfw.add(ByteCode.SWAP); // swap the object to convert with context
			cfw.addInvoke(ByteCode.INVOKEVIRTUAL,
				"dev/latvian/mods/rhino/Context",
				"toNumber",
				"(Ljava/lang/Object;)D");
			String typeName = retType.getName();
			switch (typeName.charAt(0)) {
				case 'b', 's', 'i' -> {
					cfw.add(ByteCode.D2I);
					cfw.add(ByteCode.IRETURN);
				}
				case 'l' -> {
					cfw.add(ByteCode.D2L);
					cfw.add(ByteCode.LRETURN);
				}
				case 'f' -> {
					cfw.add(ByteCode.D2F);
					cfw.add(ByteCode.FRETURN);
				}
				case 'd' -> cfw.add(ByteCode.DRETURN);
				default -> throw new RuntimeException("Unexpected return type " + retType);
			}

		} else {
			String retTypeStr = retType.getName();
			if (callConvertResult) {
				cfw.add(ByteCode.ALOAD_0); // this
				cfw.add(ByteCode.GETFIELD, genName, "context", "Ldev/latvian/mods/rhino/Context;");
				cfw.add(ByteCode.SWAP); // swap the object to convert with context

				cfw.addLoadConstant(retTypeStr);
				cfw.addInvoke(ByteCode.INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;");

				//public static Object convertResult(Context, Object, Class<?>)
				cfw.addInvoke(ByteCode.INVOKESTATIC,
					"dev/latvian/mods/rhino/JavaAdapter",
					"convertResult",
					"(Ldev/latvian/mods/rhino/Context;" + "Ljava/lang/Object;" + "Ljava/lang/Class;" + ")Ljava/lang/Object;");
			}
			// Now cast to return type
			cfw.add(ByteCode.CHECKCAST, retTypeStr);
			cfw.add(ByteCode.ARETURN);
		}
	}

	private static void generateMethod(ClassFileWriter cfw, String genName, String methodName, Class<?>[] parms, Class<?> returnType, boolean convertResult, Context cx) {
		StringBuilder sb = new StringBuilder();
		int paramsEnd = appendMethodSignature(parms, returnType, sb);
		String methodSignature = sb.toString();
		cfw.startMethod(methodName, methodSignature, ClassFileWriter.ACC_PUBLIC);

		// Prepare stack to call method

		// push context
		cfw.add(ByteCode.ALOAD_0);
		cfw.add(ByteCode.GETFIELD, genName, "context", "Ldev/latvian/mods/rhino/Context;");

		// push self
		cfw.add(ByteCode.ALOAD_0);
		cfw.add(ByteCode.GETFIELD, genName, "self", "Ldev/latvian/mods/rhino/Scriptable;");

		// push function
		{
			cfw.add(ByteCode.ALOAD_0);
			cfw.add(ByteCode.GETFIELD, genName, "delegee", "Ldev/latvian/mods/rhino/Scriptable;"); // obj
			cfw.addPush(methodName); // functionName
			cfw.add(ByteCode.ALOAD_0);
			cfw.add(ByteCode.GETFIELD, genName, "context", "Ldev/latvian/mods/rhino/Context;"); // cx
			// public static Function getFunction(Scriptable obj, String functionName, Context cx)
			cfw.addInvoke(ByteCode.INVOKESTATIC,
				"dev/latvian/mods/rhino/JavaAdapter",
				"getFunction",
				"(Ldev/latvian/mods/rhino/Scriptable;" + "Ljava/lang/String;" + "Ldev/latvian/mods/rhino/Context;" + ")Ldev/latvian/mods/rhino/Function;");
		}

		// push arguments
		generatePushWrappedArgs(cfw, parms, parms.length);

		// push bits to indicate which parameters should be wrapped
		if (parms.length > 64) {
			// If it will be an issue, then passing a static boolean array
			// can be an option, but for now using simple bitmask
			throw Context.reportRuntimeError0("JavaAdapter can not subclass methods with more then" + " 64 arguments.", cx);
		}
		long conversionMask = 0;
		for (int i = 0; i != parms.length; ++i) {
			if (!parms[i].isPrimitive()) {
				conversionMask |= (1L << i);
			}
		}
		cfw.addPush(conversionMask);

		// go through utility method, which creates a Context to run the
		// method in.
		// public static Object callMethod(Context, Scriptable, Function, Object[], long)
		cfw.addInvoke(ByteCode.INVOKESTATIC,
			"dev/latvian/mods/rhino/JavaAdapter",
			"callMethod",
			"(Ldev/latvian/mods/rhino/Context;" + "Ldev/latvian/mods/rhino/Scriptable;" + "Ldev/latvian/mods/rhino/Function;" + "[Ljava/lang/Object;" + "J" + ")Ljava/lang/Object;");

		generateReturnResult(cfw, genName, returnType, convertResult);

		cfw.stopMethod((short) paramsEnd); // Locals are counted when parsing the generated method signature
	}

	/**
	 * Generates code to push typed parameters onto the operand stack
	 * prior to a direct Java method call.
	 */
	private static short generatePushParam(ClassFileWriter cfw, short paramOffset, Class<?> paramType) {
		if (!paramType.isPrimitive()) {
			cfw.addALoad(paramOffset);
			return 1;
		}
		String typeName = paramType.getName();
		switch (typeName.charAt(0)) {
			case 'z', 'b', 'c', 's', 'i' -> {
				// load an int value, convert to double.
				cfw.addILoad(paramOffset);
				return 1;
			}
			case 'l' -> {
				// load a long, convert to double.
				cfw.addLLoad(paramOffset);
				return 2;
			}
			case 'f' -> {
				// load a float, convert to double.
				cfw.addFLoad(paramOffset);
				return 1;
			}
			case 'd' -> {
				cfw.addDLoad(paramOffset);
				return 2;
			}
		}
		throw Kit.codeBug();
	}

	/**
	 * Generates code to return a Java type, after calling a Java method
	 * that returns the same type.
	 * Generates the appropriate RETURN bytecode.
	 */
	private static void generatePopResult(ClassFileWriter cfw, Class<?> retType) {
		if (retType.isPrimitive()) {
			String typeName = retType.getName();
			switch (typeName.charAt(0)) {
				case 'b', 'c', 's', 'i', 'z' -> cfw.add(ByteCode.IRETURN);
				case 'l' -> cfw.add(ByteCode.LRETURN);
				case 'f' -> cfw.add(ByteCode.FRETURN);
				case 'd' -> cfw.add(ByteCode.DRETURN);
			}
		} else {
			cfw.add(ByteCode.ARETURN);
		}
	}

	/**
	 * Generates a method called "super$methodName()" which can be called
	 * from JavaScript that is equivalent to calling "super.methodName()"
	 * from Java. Eventually, this may be supported directly in JavaScript.
	 */
	private static void generateSuper(ClassFileWriter cfw, String superName, String methodName,
									  String methodSignature, Class<?>[] parms, Class<?> returnType) {
		cfw.startMethod("super$" + methodName, methodSignature, ClassFileWriter.ACC_PUBLIC);

		// push "this"
		cfw.add(ByteCode.ALOAD_0);

		// push the rest of the parameters.
		short paramOffset = 1;
		for (Class<?> parm : parms) {
			paramOffset += generatePushParam(cfw, paramOffset, parm);
		}

		// call the superclass implementation of the method.
		cfw.addInvoke(ByteCode.INVOKESPECIAL, superName, methodName, methodSignature);

		// now, handle the return type appropriately.
		if (!returnType.equals(Void.TYPE)) {
			generatePopResult(cfw, returnType);
		} else {
			cfw.add(ByteCode.RETURN);
		}
		cfw.stopMethod((short) (paramOffset + 1));
	}

	/**
	 * Returns a fully qualified method name concatenated with its signature.
	 */
	private static String getMethodSignature(Method method, Class<?>[] argTypes) {
		StringBuilder sb = new StringBuilder();
		appendMethodSignature(argTypes, method.getReturnType(), sb);
		return sb.toString();
	}

	static int appendMethodSignature(Class<?>[] argTypes, Class<?> returnType, StringBuilder sb) {
		sb.append('(');
		int firstLocal = 1 + argTypes.length; // includes this.
		for (Class<?> type : argTypes) {
			appendTypeString(sb, type);
			if (type == Long.TYPE || type == Double.TYPE) {
				// adjust for double slot
				++firstLocal;
			}
		}
		sb.append(')');
		appendTypeString(sb, returnType);
		return firstLocal;
	}

	private static void appendTypeString(StringBuilder sb, Class<?> type) {
		while (type.isArray()) {
			sb.append('[');
			type = type.getComponentType();
		}
		if (type.isPrimitive()) {
			char typeLetter;
			if (type == Boolean.TYPE) {
				typeLetter = 'Z';
			} else if (type == Long.TYPE) {
				typeLetter = 'J';
			} else {
				String typeName = type.getName();
				typeLetter = Character.toUpperCase(typeName.charAt(0));
			}
			sb.append(typeLetter);
		} else {
			sb.append('L');
			sb.append(type.getName().replace('.', '/'));
			sb.append(';');
		}
		//return sb;
	}

	static int[] getArgsToConvert(Class<?>[] argTypes) {
		int count = 0;
		for (int i = 0; i != argTypes.length; ++i) {
			if (!argTypes[i].isPrimitive()) {
				++count;
			}
		}
		if (count == 0) {
			return null;
		}
		int[] array = new int[count];
		count = 0;
		for (int i = 0; i != argTypes.length; ++i) {
			if (!argTypes[i].isPrimitive()) {
				array[count++] = i;
			}
		}
		return array;
	}

	@Override
	public Object execIdCall(IdFunctionObject f, Context cx, Scriptable scope, Scriptable thisObj, Object[] args) {
		if (f.hasTag(FTAG)) {
			if (f.methodId() == Id_JavaAdapter) {
				return js_createAdapter(cx, scope, args);
			}
		}
		throw f.unknown();
	}
}
